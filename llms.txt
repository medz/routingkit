# RoutingKit

RoutingKit is a lightweight and high-performance routing library for Dart, suitable for both web and command-line applications.

## Project Overview

RoutingKit provides a flexible and efficient routing system with the following features:
- Fast route matching and parameter extraction
- Support for static, parameterized, and wildcard routes
- Efficient memory usage through a trie-based route storage
- Type-safe route handlers
- Configurable case sensitivity for path matching

## Core Components

- `Router` class: The main router class for managing routes
- `MatchedRoute`: Represents a matched route result
- `createRouter()`: Creates a new router instance

## Code Structure

- [lib/src/router.dart](lib/src/router.dart.md): Main routing implementation
- [lib/src/types.dart](lib/src/types.dart.md): Defines core types like MatchedRoute
- [lib/routingkit.dart](lib/routingkit.dart.md): Public API entry point

## Usage Example

```dart
// Create a router with default settings (case-sensitive)
final router = createRouter<String>();

// Create a case-insensitive router
final caseInsensitiveRouter = createRouter<String>(caseSensitive: false);

// Add routes
router.add('GET', '/path', 'static route');
router.add('POST', '/path/:name', 'name route');

// Find routes
print(router.find('GET', '/path')); // => {data: static route}
```

## Feature Details

- **Route Addition**: Add static routes, parameter routes, and wildcard routes
- **Route Matching**: Find the first matching route or all matching routes
- **Route Removal**: Remove routes by method, path, and data
- **HTTP Method Matching**: Specify different handling logic for different HTTP methods
- **Case Sensitivity**: Configure whether path matching is case-sensitive or not

## API Reference

### Router<T> Class

The `Router<T>` class is the core component of RoutingKit. It provides methods for managing and matching routes.

#### Properties:

- `String anyMethodToken`: Token used to represent any HTTP method
- `bool caseSensitive`: Whether path matching is case-sensitive

#### Key Methods:

- `void add(String? method, String path, T data)`: Adds a new route to the router
- `MatchedRoute<T>? find(String? method, String path, {bool includeParams = true})`: Finds the first route matching the given path and method
- `List<MatchedRoute<T>> findAll(String? method, String path, {bool includeParams = true})`: Finds all routes matching the given path and method
- `bool remove(String? method, String path, [T? data])`: Removes a route from the router

### MatchedRoute<T> Class

The `MatchedRoute<T>` class represents a matched route result.

#### Properties:

- `T data`: Data associated with the matched route
- `Map<String, String>? params`: Parameters extracted from the route, null if no parameters

### createRouter<T> Function

Creates a new router instance with the specified configuration.

#### Parameters:

- `String anyMethodToken`: Token used to represent any HTTP method, defaults to 'routerkit-method://any'
- `bool caseSensitive`: Whether path matching is case-sensitive, defaults to true 